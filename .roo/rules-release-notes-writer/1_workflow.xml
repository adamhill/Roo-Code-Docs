  <workflow_instructions>
  <mode_overview>
    Automates creating release notes for new Roo Code versions. Fetches pull requests
    from GitHub, analyzes changes, and generates notes based on doc standards.
  </mode_overview>

  <initialization_steps>
    <step number="1">
      <action>Receive version number from user</action>
      <details>
        User provides the new version number (e.g., 3.20.3) to start.
      </details>
    </step>
    
    <step number="2">
      <action>Determine version range</action>
      <tools>
        <tool>list_files - Find previous version in docs/update-notes</tool>
      </tools>
      <details>
        List files in docs/update-notes to find the last version file and set the range for fetching changes.
      </details>
    </step>
  </initialization_steps>

	<main_workflow>
		<phase name="gather_technical_information">
			<description>Collect PR data from GitHub. Skipped if user provides a PR number list.</description>
			<steps>
		             <step number="1">
		                 <action>Check for user-provided PR list</action>
		                 <details>If user gives a list of PR numbers, skip to 'process_each_pr' phase.</details>
		             </step>
				<step number="2">
					<action>Fetch release dates</action>
					<tool>gh api (get tag)</tool>
					<details>Get commit dates for new and previous version tags to set a date range using gh CLI.</details>
				</step>
				<step number="3">
					<action>Search for merged PRs within date range</action>
					<tool>gh pr list or gh search prs</tool>
					<details>
				        Use release date range to search for merged PRs.
				        Query: `--state merged --search "merged:YYYY-MM-DD..YYYY-MM-DD"`
				      </details>
				</step>
			</steps>
		</phase>
		<phase name="process_each_pr">
			<description>Process PRs with subtasks. Each subtask investigates one PR, storing findings in a temp file.</description>
			<initialization>
				<step>
					<action>Create temporary analysis file</action>
					<tool>write_to_file</tool>
					<file>temp_pr_analysis.md</file>
					<content># PR Analysis for Release Notes v[version]

</content>
					<details>Create an empty temp file that subtasks will append to.</details>
				</step>
			</initialization>
			<subtask_workflow>
				<overview>
					For each PR, create a subtask with new_task. Each subtask investigates one PR and appends findings to temp_pr_analysis.md.
				</overview>
				
				<per_pr_steps>
					<step number="1">
						<action>Create PR investigation subtask</action>
						<tool>new_task</tool>
						<details>
							Create a release-notes-writer subtask to investigate the PR.
						</details>
						<message_format>
							Investigate PR #[number] for release notes v[version].
							
							Task:
							1. Get PR details with gh pr view
							2. Extract linked issues from PR description (e.g., "Fixes #123")
							3. Get details for linked issues with gh issue view
							4. Analyze and categorize the change (bug fix, feature, etc.)
							5. Append findings to temp_pr_analysis.md in the specified format. Use insert_content with line 0 to append to the end of the file.
							
							Use update_todo_list to track your progress through these steps.
						</message_format>
					</step>
					
					<step number="2">
						<action>Wait for subtask completion</action>
						<details>
							The subtask handles these steps: fetch PR/issue details, analyze change, write findings to temp_pr_analysis.md, and report completion.
						</details>
					</step>
					
					<step number="3">
						<action>Move to next PR</action>
						<details>
							After subtask is confirmed complete, create the next PR investigation subtask.
						</details>
					</step>
				</per_pr_steps>
				
				<completion_per_pr>
					After each subtask writes its findings, move to the next PR.
				</completion_per_pr>
			</subtask_workflow>
		</phase>
		<phase name="compile_final_release_notes">
			<description>Read temporary analysis file and compile findings into the final release notes.</description>
			<steps>
				<step number="1">
					<action>Read temporary analysis file</action>
					<details>
						Read temp_pr_analysis.md, which contains all PR investigation findings.
					</details>
				</step>
				<step number="2">
					<action>Group and organize findings</action>
					<details>
						Group PRs by category (Bug Fixes, QOL Improvements, etc.) based on the analysis.
					</details>
				</step>
				<step number="3">
					<action>Format for release notes</action>
					<details>
						Convert findings into final release note format with acknowledgments and direct language.
					</details>
				</step>
				<step number="4"gt;
					<action>Clean up temporary file</action>
					<details>
						Optionally remove the temporary analysis file after completion.
					</details>
				</step>
			</steps>
		</phase>
		<phase name="generate_documentation">
			<description>Create and update all documentation files.</description>
			<steps>
				<step number="1">
					<action>Create release notes file</action>
					<details>
            Create docs/update-notes/vX.Y.Z.mdx with correct title, date, and sections.
          </details>
				</step>
				<step number="2">
					<action>Update index.md</action>
					<details>
            Add new release entry to the list.
          </details>
				</step>
				<step number="3">
					<action>Update sidebars.ts</action>
					<details>
            Add new release to the "Update Notes" sidebar.
          </details>
				</step>
				<step number="4">
					<action>Update combined release notes</action>
					<details>
            For patch releases, update the parent minor/major release file (e.g., update v3.20.mdx for v3.20.3).
          </details>
				</step>
			</steps>
		</phase>
		<phase name="discord_formatting" optional="true">
			<description>Generate Discord-formatted release notes via a subtask.</description>
			<when_to_use>When user asks for Discord formatting.</when_to_use>
			<steps>
				<step number="1">
					<action>Create Discord formatting subtask</action>
					<tool>new_task</tool>
					<details>
						Create a subtask to convert the release notes file to Discord format.
					</details>
					<task_instructions>
						Generate Discord-formatted release notes for version X.Y.Z.

						Requirements:
						1. Strip all PR links and numbers (#XXXX).
						2. Keep structure and content.
						3. Prepend https://docs.roocode.com/ to all internal doc links.
						4. If compressing, summarize with this format:
						   ## :wrench: [Other Improvements and Fixes](https://docs.roocode.com/update-notes/vX.Y.Z#section-anchor)
						   This release includes X other fixes covering [list key areas]. Thanks to contributors: [list contributors].
						5. Add footer link:
						   [Full X.Y.Z Release Notes](https://docs.roocode.com/update-notes/vX.Y.Z)
						
						Convert docs/update-notes/vX.Y.Z.mdx to Discord format.
					</task_instructions>
				</step>
				<step number="2">
					<action>Handle compression requests</action>
					<details>
						If user asks to compress sections, the subtask should summarize changes, thank only contributors from those sections, and link to the full notes.
					</details>
				</step>
			</steps>
		</phase>
	</main_workflow>

		<completion_criteria>
    <criterion>Release notes file created with correct formatting.</criterion>
    <criterion>All PRs analyzed and described by user benefit.</criterion>
    <criterion>Index and sidebar files updated.</criterion>
    <criterion>Combined release notes updated for patch releases.</criterion>
    <criterion>Links and references are correct.</criterion>
    <criterion>Final release notes include only items from the version's changelog.</criterion>
  </completion_criteria>
</workflow_instructions>
