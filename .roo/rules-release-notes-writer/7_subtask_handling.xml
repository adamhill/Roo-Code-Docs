  <subtask_handling_instructions>
  <overview>
    The release-notes-writer mode operates in two contexts:
    1. Main workflow: Creating full release notes.
    2. Subtask mode: Investigating a single PR.
  </overview>

  <mode_detection>
    <description>
      The mode determines its context from the initial user message.
    </description>
    <patterns>
      <pattern type="subtask_pr">
        <regex>^Investigate PR #(\d+) for release notes v([\d.]+)</regex>
        <action>Run single PR investigation.</action>
      </pattern>
      <pattern type="subtask_discord">
        <regex>^Generate Discord-formatted release notes for version ([\d.]+)</regex>
        <action>Run Discord formatting.</action>
      </pattern>
      <pattern type="main">
        <regex>^(Create|Generate|Make) release notes for (version |v)?[\d.]</regex>
        <action>Run full release notes workflow.</action>
      </pattern>
    </patterns>
  </mode_detection>

  <pr_investigation_workflow>
    <when_triggered>
      When message matches "Investigate PR #[number] for release notes v[version]".
    </when_triggered>
    
    <steps>
      <step number="1">
        <action>Extract PR number from message and create todo list.</action>
        <tool>update_todo_list</tool>
        <details>Initialize tracking for the PR investigation steps.</details>
      </step>
      
      <step number="2">
        <action>Fetch PR details.</action>
        <tool>gh pr view</tool>
        <extract>Title, author, description, merge date.</extract>
        <todo_update>Mark "Fetch PR details" as complete.</todo_update>
      </step>
      
      <step number="3">
        <action>Extract linked issues from PR description.</action>
        <process>Search for patterns like "Fixes #123".</process>
        <todo_update>Mark "Extract linked issues" as complete.</todo_update>
      </step>
      
      <step number="4">
        <action>Fetch issue details.</action>
        <tool>gh issue view</tool>
        <details>For each linked issue, get title and reporter.</details>
        <todo_update>Mark "Get details for each linked issue" as complete.</todo_update>
      </step>
      
      <step number="5">
        <action>Analyze and categorize the change.</action>
        <categories>Bug Fix, Feature, QOL Improvement, Provider Update, Performance.</categories>
        <todo_update>Mark "Analyze and categorize the change" as complete.</todo_update>
      </step>
      
      <step number="6">
        <action>Append findings to temp file.</action>
        <tool>insert_content (line 0)</tool>
        <format><![CDATA[
## PR #[number]: [Title]

**Author**: [username]
**Linked Issues**: #[issue] (reporter: [username])
**Category**: [Category]
**User Impact**: [Benefit description]
**Contributors**: [list of contributors]

---
        ]]></format>
        <file>temp_pr_analysis.md</file>
        <todo_update>Mark "Append findings to temp_pr_analysis.md" as complete.</todo_update>
      </step>
      
      <step number="7">
        <action>Write completion summary to temp file.</action>
        <tool>write_to_file</tool>
        <file>temp_subtask_complete.md</file>
        <content>Investigated PR #[number], findings documented in temp_pr_analysis.md.</content>
        <todo_update>Mark "Complete subtask" as complete.</todo_update>
      </step>
    </steps>
  </pr_investigation_workflow>

  <discord_formatting_workflow>
    <when_triggered>
      When message matches "Generate Discord-formatted release notes for version [version]".
    </when_triggered>
    
    <steps>
      <step number="1">
        <action>Extract version number from message.</action>
      </step>
      
      <step number="2">
        <action>Read completed release notes file.</action>
        <tool>read_file</tool>
        <file>docs/update-notes/vX.Y.Z.mdx</file>
      </step>
      
      <step number="3">
        <action>Transform content for Discord.</action>
        <transformations>
          <transformation>Remove PR links/numbers.</transformation>
          <transformation>Convert internal links to full URLs.</transformation>
          <transformation>Handle compression requests.</transformation>
        </transformations>
      </step>
      
      <step number="4">
        <action>Apply compression if requested.</action>
        <compression_format><![CDATA[
## :wrench: [Other Improvements and Fixes](link)
This release includes N other fixes... Thanks to contributors: [list]
        ]]></compression_format>
      </step>
      
      <step number="5">
        <action>Add footer link.</action>
        <footer>[Full X.Y.Z Release Notes](link)</footer>
      </step>
      
      <step number="6">
        <action>Write Discord-formatted content to temp file.</action>
        <tool>write_to_file</tool>
        <file>temp_discord_release_notes.md</file>
        <details>Write the complete Discord-formatted release notes to the temp file.</details>
      </step>
      
      <step number="7">
        <action>Write completion summary to temp file.</action>
        <tool>write_to_file</tool>
        <file>temp_subtask_complete.md</file>
        <content>Discord-formatted release notes for version [version] written to temp_discord_release_notes.md.</content>
      </step>
    </steps>
  </discord_formatting_workflow>

  <error_handling>
    <scenario>
      <error>PR not found.</error>
      <action>Report error with PR details.</action>
    </scenario>
    <scenario>
      <error>No linked issues found.</error>
      <action>Proceed with only PR author as contributor.</action>
    </scenario>
    <scenario>
      <error>Issue not accessible.</error>
      <action>Note issue reference but skip reporter details.</action>
    </scenario>
  </error_handling>

  <best_practices>
    <practice>Always append to temp_pr_analysis.md.</practice>
    <practice>Include all contributors, remove duplicates.</practice>
    <practice>Focus on user impact, not implementation.</practice>
    <practice>Use consistent formatting for parsing.</practice>
  </best_practices>
</subtask_handling_instructions>